---
title: "Designing Multiplayer Location-Based Augmented Reality Games that Make Use of the Real-World"
author:
  name: "Yasas Sri Wickramasinghe"
  affiliation: "HIT Lab NZ, University of Canterbury"
  email: "yasas.wickramasinghe@pg.canterbury.ac.nz"
date: today
format:
  html:
    code-fold: false
    toc: true
    link-external-newwindow: true
theme:
  light: flatly
  dark: darkly
---

# Introduction

![Project Image](images/Project Image.jpg)

Location-based augmented reality games (LBARGs) hold the potential to foster physical activity, enhance social engagement, and boost self-esteem. However most of the existing LBARGs are limited to a specific location or do not promote real-time remote gameplay. Nevertheless, what if the LBGs can expand their scope further by utilising the characteristics of gameplay locations within the game and allowing distributed synchronous gameplay possible? This direction motivates us to explore LBGs, and further understand game engagement, presence, and immersion. Therefore, our exhibit presents a novel game design addressing these limitations and unveils a unique way of connecting multiple co- located players with multiple remote players and their spaces using augmented reality (AR) windows. Moreover, this game design helps us understand the limitations of current LBARGs by pushing their boundaries and improving the way real-world environments are integrated into gameplay.

## A note on project structure

Today, we have cloned an existing project structure. It is important that you create a project structure that works for your particular case. A general framework is to create a primary directory that is your repo and contains your `.qmd` script, and sub directories for data, outputs.

-   /primary_directory

    -   script.qmd

    -   .git, .gitignore

    -   /data

        -   data.csv

    -   /outputs

        -   results

Plenty of tools exist for reproducibility (such as the `renv` package to record package versions used in your project).

# Packages and libraries {.unlisted}

It is good practice to include a list of packages used as well as any source files or functions up front. `{.unlisted}` will exclude the section from the table of contents. You can hide the section completely with `{.unlisted .hidden}`. This is useful for sections like 'packages' which are included in the code for reproducibility and are necessary to execute but maybe unnecessary to display. If your sections are numbered (insert `number-sections: true` in [YAML](https://quarto.org/docs/output-formats/html-basics.html#section-numbering)) then you will need `{.unlisted. unnumbered .hidden}` to hide the section.

You might also include sourcing any function scripts (e.g., `source("my_functions.R")`).

```{r Libraries}
#| include: false
if (!require("pacman")) install.packages("pacman", repos="http://cran.r-project.org")
pacman::p_load(ggplot2, palmerpenguins)    # Install & load packages
```

# You can't see me! {.unlisted .hidden}

Lah lah lah!

I'm here in spirit, code will still be executed.

# Data wrangling

Typically you need to do some tidying of your data. Each project will have different reqirements e.g., transforming data or generating new datasets. You probably want to dedicate a section just for wrangling but may want to hide it from the output. See [R for Data Science](https://r4ds.had.co.nz/introduction.html) for more info.

# Visualisations {.tabset}

Sometimes I have a lot of plots (like, a lot!). Perhaps generated from a loop that outputs a list of related plots. It is possible to programatically generate panel tabsets rather that repeatedly writing out the heading `#` and inserting the plot (e.g., `plot_list[[1]]`). As an example, I've grabbed a couple of plots from [Alison Horst](https://allisonhorst.github.io/palmerpenguins/articles/examples.html) again.

```{r}
# A list of plots:
plot_list <- penguins |>
  split(penguins$species) |>
  lapply(function(x){
    ggplot(x, aes(x = flipper_length_mm, y = body_mass_g)) + 
      geom_point() +
      theme_minimal()
  }) 

# Make some heading names:
headings <- names(plot_list)
```

## Plot tabs

The code might be a little complicated but useful to reduce the length and manual work if you have a lot of outputs.

::: panel-tabset
```{r, results='asis'}
#| warning: false

# Use a loop (or lapply, or map, you choose) to generate the headings and insert plots
for (i in seq_along(plot_list)) {
  cat("# ",headings[i],"\n")
  print(plot_list[[i]])
  cat('\n\n')
}
```
:::

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv("az.csv")
mean_values = data.groupby("Mode").mean()

game_modes = ["Tabletop", "Overlay", "Window"]
spes_items = ["SL1", "SL2", "SL3", "SL4", "PA1", "PA2", "PA3", "PA4"]
x = range(len(spes_items))
width = 0.2

fig, ax = plt.subplots()

for i, mode in enumerate(game_modes):
    ax.bar([val + width*i for val in x], mean_values.loc[i+1], width, label=mode)

ax.set_xticks([val + width for val in x])
ax.set_xticklabels(spes_items)
ax.set_xlabel("SPES Items")
ax.set_ylabel("Mean")
ax.set_title("Comparison of Game Modes")
ax.legend()

plt.tight_layout()
plt.show()

```

# To do

I sometimes keep a project to-do list here

-   [x] Get up

-   [x] Put on pants

-   [ ] Present workshop

# Final remarks

This workshop is primarily designed to introduce you to tools and useful features in Quarto. Regardless of your workflow (which this template may not fit!), hopefully you will have the tools to make sharing results and colaborating with supervisors and researchers much easier.

# Useful links

[Biostats](https://biostats-r.github.io/biostats/quarto/) - very useful resource for authoring documents in Quarto.

[Awsome Quarto](https://github.com/mcanouil/awesome-quarto) - a big list of Quarto things.

[Generating a DOI using Zenodo](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content)

# References

References will appear here!
